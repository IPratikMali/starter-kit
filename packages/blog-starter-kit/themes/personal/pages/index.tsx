import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useState } from 'react';
import { Waypoint } from 'react-waypoint';
import { HeroPost } from '../components/HeroPost';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { ArticleSVG } from '../components/icons';
import { LastPost } from '../components/last-post';
import { Layout } from '../components/layout';
import { MiddlePost } from '../components/middle-posts';
import { MinimalPosts } from '../components/minimal-posts';
import { Navbar } from '../components/navbar';
import { PersonalHeader } from '../components/personal-theme-header';
import { SquarePosts } from '../components/square-posts';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfoFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';
const SubscribeForm = dynamic(() =>
	import('../components/subscribe-form').then((mod) => mod.SubscribeForm),
);

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialPosts: PostFragment[];
	initialPageInfo: PageInfoFragment;
};

export default function Index({ publication, initialPosts, initialPageInfo }: Props) {
	const [posts, setPosts] = useState<PostFragment[]>(initialPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);
	const [loadedMore, setLoadedMore] = useState(false);

	const loadMore = async () => {
		const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			MorePostsByPublicationDocument,
			{
				first: 20,
				host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
				after: pageInfo.endCursor,
			},
		);
		if (!data.publication) {
			return;
		}
		const newPosts = data.publication.posts.edges.map((edge) => edge.node);
		setPosts([...posts, ...newPosts]);
		setPageInfo(data.publication.posts.pageInfo);
		setLoadedMore(true);
	};
	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>{publication.title}</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image" />
					<meta
						property="twitter:title"
						content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
					/>
					<meta
						property="twitter:description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>

				<Container className="mx-auto flex max-w-screen-xl flex-col items-stretch gap-10 px-5 py-10">
					<PersonalHeader />
					<Navbar />
					{posts.length === 0 && (
						<div className="grid grid-cols-1 py-20 lg:grid-cols-3">
							<div className="col-span-1 flex flex-col items-center gap-5 text-center text-slate-700 dark:text-neutral-400 lg:col-start-2">
								<div className="w-20">
									<ArticleSVG clasName="stroke-current" />
								</div>
								<p className="text-xl font-semibold ">
									Hang tight! We&apos;re drafting the first article.
								</p>
							</div>
						</div>
					)}

					{/* Display the HeroPost component for the hero post */}
					{posts.length > 0 && (
						<HeroPost
							title={posts[0].title}
							coverImage={posts[0].coverImage?.url || ''}
							date={posts[0].publishedAt}
							excerpt={posts[0].brief}
							slug={posts[0].slug}
						/>
					)}
					{/* Display the MinimalPosts component for minimal posts */}

					{posts.length > 1 && <MinimalPosts context="home" posts={posts.slice(1, 9)} />}

					{posts.length > 0 && (
						<div className="bg-primary-50 grid grid-cols-4 rounded-lg px-5 py-5 dark:bg-neutral-900 md:py-10">
							<div className="col-span-full md:col-span-2 md:col-start-2">
								<h2 className="text-primary-600 dark:text-primary-500 mb-5 text-center text-lg font-semibold">
									Subscribe to our newsletter for updates and changelog.
								</h2>
								<SubscribeForm />
							</div>
						</div>
					)}

					{/* Display the MiddlePosts component for the MiddlePost */}
					{posts.length > 10 && (
						<MiddlePost
							title={posts[10].title}
							coverImage={posts[10].coverImage?.url || ''}
							date={posts[10].publishedAt}
							excerpt={posts[10].brief}
							slug={posts[10].slug}
						/>
					)}
					{/* Display the SquarePosts component for the last 8 posts */}
					<section className="sm-max:grid-cols-1 grid grid-cols-2 gap-14 lg:grid-cols-3">
						{posts.length > 11 &&
							posts
								.slice(11, 17)
								.map((post) => (
									<SquarePosts
										key={post.id}
										title={post.title}
										coverImage={post.coverImage?.url}
										date={post.publishedAt}
										slug={post.slug}
										excerpt={post.brief}
									/>
								))}
					</section>

					{/* Display the LastPost component for the last-post */}
					{posts.length > 18 && (
						<LastPost
							title={posts[18].title}
							coverImage={posts[18].coverImage?.url || ''}
							date={posts[18].publishedAt}
							excerpt={posts[18].brief}
							slug={posts[18].slug}
						/>
					)}
					<section className="sm-max:grid-cols-1 grid grid-cols-2 gap-14 lg:grid-cols-3">
						{posts.length > 19 &&
							posts
								.slice(19)
								.map((post) => (
									<SquarePosts
										key={post.id}
										title={post.title}
										coverImage={post.coverImage?.url}
										date={post.publishedAt}
										slug={post.slug}
										excerpt={post.brief}
									/>
								))}
					</section>
					{!loadedMore && pageInfo.hasNextPage && pageInfo.endCursor && (
						<button className="bg-white" onClick={loadMore}>
							Load more
						</button>
					)}

					{loadedMore && pageInfo.hasNextPage && pageInfo.endCursor && (
						<Waypoint onEnter={loadMore} bottomOffset={'10%'} />
					)}

					<Footer />
				</Container>
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 20,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialPosts = (publication.posts.edges ?? []).map((edge) => edge.node);

	return {
		props: {
			publication,
			initialPosts,
			initialPageInfo: publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
